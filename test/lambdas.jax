fun assert(b: bool) @extern

// At compile time lambdas are first class, so we
// can construct them and pass them around as
// regular variables. This can only happen in
// a static block.
static var my_cool_blk: lambda
static {
  var blk = block {
    var i = 0
    while i < 3 {
      i = i + 1
    }
    i // Implicit return
  }
  
  if 123 > 20 {
    my_cool_blk = blk
  }
}
// Inlines the lambda contents
var m1 = my_cool_blk()
var m2 = my_cool_blk()
var m3 = my_cool_blk()
var result = m1 + m2 + m3
assert(result == 9)


fun run_four_times(blk: lambda) @inline {
  blk()
  blk()
  blk()
  blk()
}

// We can construct a lambda at compile time
// and pass it to a function expecting a lambda
// as long as that function is marked inline.
static var blk = block {
  print("inside a block")
}
run_four_times(blk)

// We can construct a lambda in place, all lambdas
// are implicitly marked as static.
run_four_times(block {
  print("run this anonymous block 4 times")
})

static var single_line = block { print("They can be single line") }
single_line()

// Lambdas have access to the outer scope variables.
// Since the lambda and the run_four_times function
// are inlined then there are no closed-over variables
// and so no closures and no runtime cost.
{
  var another_result = 0
  run_four_times(block {
    another_result = another_result + 1
  })
  assert(another_result == 4)
}

// Functions are inlined so control flow acts as they
// would in the outer scope, including returns.
{
  fun try_something(): number {
    var result = 0
    run_four_times(block {
      result = result + 1
      if result == 3 {
        return result
      }
    })
    return result
  }

  var result = try_something()
  assert(result == 3)
}

// Lambdas can have parameters
static var params_blk = block { |x, y, z|
  x + y * z
}
assert(params_blk(1,2,3) == 7)

// Params can be passed around like usual
{
  fun run_times(n: number, blk: lambda) @inline {
    var i = 0
    while i < n {
      blk(i)
      i = i + 1
    }
  }

  var count = 0
  run_times(5, block { |i|
    count = count + i
  })
  assert(count == 10)
}