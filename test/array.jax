fun assert(b: bool) @extern

fun calloc(num: number, size: number): voidptr @extern
fun memcpy(dest: voidptr, src: voidptr, size: number): voidptr @extern

struct array_base {
  elem_size: number
  data: voidptr
  len: number
  cap: number
}
fun _new_array_from_literal(len: number, cap: number, elem_size: number, c_array: voidptr): array_base {
  var a: array_base
  a.data = calloc(len, elem_size)
  a.elem_size = elem_size
  a.len = len
  a.cap = cap
  memcpy(a.data, c_array, len * elem_size)
  return a
}

// Polymorphic function doesn't duplicate for different arrays
// because the element types are the same
var a = [10, 2.22, 33123123.0, 123123, 2.34]
var b = [1,2,3,5]

fun hello(a: array) {
  print(a[0])
}

hello(a)
hello(b)

// 'array' is a type constructor so the array type is
// constructable from the concrete type a. constructable
// isn't the right word here?
var thing: array = a
assert(thing[0] + thing[1] == 12.22)

// for loops of arrays
fun iterate(a: array, f: lambda) @inline {
  var i = 0
  while i < a.len {
    f(a[i])
    i += 1
  }
}


var total = 0
for x in a {
  total += x
}
assert(total == 33246260.560000)