fun assert(b: bool) @extern

fun run_four_blk(blk: lambda) @inline {
  blk()
  blk()
  blk()
  blk()
}

fun try_something(): number {
  var result = 0
  run_four_blk(block {
    result = result + 1
    if result == 3 {
      return result
    }
  })
  return result
}

var result = try_something()
print("It is $result")


// fun run_four_blk(blk: lambda) @inline {
//   blk()
//   blk()
//   blk()
//   blk()
// }
// fun run_four(text: string) @inline {
//   print("Calling print 4 times")
//   print(text)
//   print(text)
//   print(text)
//   print(text)
// }

// static var my_cool_blk: lambda
// static {
//   var blk = block {
//     var i = 0
//     while i < 3 {
//       print("Print something!")
//       i = i + 1
//     }
//     i
//   }
//   if 123 > 20 {
//     my_cool_blk = blk
//   }
// }
// // Inlines the lambda contents
// var m1 = my_cool_blk()
// var m2 = my_cool_blk()
// var m3 = my_cool_blk()
// var result = m1 + m2 + m3
// print("result of calling blocks: $result")

// run_four("hello")
// run_four("hello something")

// static var blk = block {
//   print("inside a block")
// }
// run_four_blk(blk)
// run_four_blk(block {
//   print("run this anonymous block 4 times")
// })


// fun iterate(blk: lambda) @inline {
//   var i = 0
//   while i < 10 {
//     blk(i)
//     i = i + 1
//   }
// }
// fun ints(start: number, blk: lambda) @inline {
//   while true {
//     blk(start)
//     start = start + 1
//   }
// }

// fun take(n: number, gen: lambda) @inline {
//   var i = 0
//   gen { |f|
//     i = i + 1
//     f()
//     if i >= n {
//       return
//     }
//   }
// }

// fun map(a: array, blk: block) @inline {
//   a = []
//   for (x in a) {
//     a[it_index] = blk(x)
//   }
//   return a
// }

// my_list = map(a) { it + 1 }

// a = []
// for (it in a) {
//   a[it_index] = it + 1
// }
// my_list = a


// fun test_thing(thing): placeholder {
//  static if typeof(thing) == string {
//    static function.return_type = string;
//    print("Okay")
//  } else if (typeof(thing) == number) {
//   print("Whatever")
//  }
// }
// test_thing(100)
