fun calloc(num: number, size: number): voidptr @extern
fun memcpy(dest: voidptr, src: voidptr, size: number): voidptr @extern

var start = clock_seconds()
var something = 100

static {
  var cool_thing = 3
  print(cool_thing)
  print(clock_seconds())

  print("This is printing at compile time: $cool_thing")
  add_code("var compile_value = something * 300\n")
  add_code("print(compile_value)\n")
}

static if 3 > 2 {
  print(200)
}


var apple = 5
var banana = 4 + (apple + 2) / 3 - 2
var thing = @string(indented) "
        \"jax\" is cool
        apple = $apple
        banana = $banana
"

print("apple is $apple asdasd ")
// print(banana)

// banana = banana - 1
// print(banana)

// // print(thing == "monkey")
// // print(thing + "_something")

// print(thing)

// {
// 	banana = 3
// }

fun hello(x: number, y: bool, z: string) {
  print(x)
  print(y)
  print(z)
}
hello(2, apple < 40, thing)

// fun things(a, b): number {
//   return 123 + a * b
// }

if true {
	print("Yes")
} else {
	print("Banana")
}

while banana > 0 {
	banana = banana - 1
	print(banana)
}

struct person {
  firstname: string
  lastname: string
  age: number
}

var me: person
me.firstname = "Jake"
me.lastname = "Someone"
me.age = 200

print(me.firstname)
print(me.age + 10)
var fn = me.firstname
var ln = me.lastname
// print("fullname is $fn $ln")



struct array_base {
  elem_size: number
  data: voidptr
  len: number
  cap: number
}
fun _new_array_from_literal(len: number, cap: number, elem_size: number, c_array: voidptr): array_base {
  var a: array_base
  a.data = calloc(len, elem_size)
  a.elem_size = elem_size
  a.len = len
  a.cap = cap
  memcpy(a.data, c_array, len * elem_size)
  return a
}

var a = [10, 2.22, 33123123.0, 123123, 2.34]

var i = 0
while i < a.len {
  print(a[i])
  i = i + 1
}


// print(things(5, 6))
// things("asd", "asd")
// print(200 + things(true, 6))

fun compare(x, y) {
 
  if x == y {
    print("They are the same")
  }
}
compare("hello", "jello")
// compare(5, 5)

// fun test_thing(thing): placeholder {
//  static if typeof(thing) == string {
//    static function.return_type = string;
//    print("Okay")
//  } else if (typeof(thing) == number) {
//   print("Whatever")
//  }
// }
// test_thing(100)

fun fib(n): number {
 if n < 2 {
   return n
 }
 return fib(n - 2) + fib(n - 1)
}

// var correct = fib(35) == 9227465
// print("was correct? $correct")
////print("{}", fib(3))

// if apple < 10 {
//  print("apple is less than 10")
// }

// while banana > 0 {
//  banana = banana - 1
//  print(banana)
// }

// var dyn: dynamic = "thing"
// print(dyn)
// dyn = 200
// print(dyn)
//
//
//{
//  var x = array()
//  print("size of {} is {}", x, size(x))
//
//  add(x, "hello")
//  add(x, "this")
//  add(x, "is")
//  add(x, "a")
//  add(x, "test")
//  print("size of {} is {}", x, size(x))
//
//  var i = 0
//  while i < size(x) {
//    print("index {} is {}", i, get(x, i))
//    i = i + 1
//  }
//
//}
//

static {
  print(123)
}
var time = clock_seconds() - start
print("time was $time s")