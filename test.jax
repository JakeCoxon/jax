fun assert(b: bool) @extern


fun calloc(num: number, size: number): voidptr @extern
fun memcpy(dest: voidptr, src: voidptr, size: number): voidptr @extern

struct array_base {
  elem_size: number
  data: voidptr
  len: number
  cap: number
}
fun _new_array_from_literal(len: number, cap: number, elem_size: number, c_array: voidptr): array_base {
  var a: array_base
  a.data = calloc(len, elem_size)
  a.elem_size = elem_size
  a.len = len
  a.cap = cap
  memcpy(a.data, c_array, len * elem_size)
  return a
}


var xs = [1,2,3]
// print(xs[1] + xs[2])

fun iterate(xs, f: lambda) @inline {
  var i = 0
  while i < xs.len {
    f(xs[i])
    i = i + 1
  }
}
iterate(xs) {|x| print(x)}

for x in xs {
  print(x)
}

// /*
// // Ideas ////

// // Reference objects

// var me = person { name: "Jake" } // reference object
// // compiler decides if it's stack or heap allocated


// fun do_something(p: person) { // always receives a pointer
//   p.name = "Other" // modifies reference object
// }

// do_something(me) // always passes by pointer
// do_something(me.copy()) // explicit copy

// // Value object

// var pos = vec3(0,0,0) // value object

// fun do_something(p: vec3) { // always receives a value
//   p.x += 1 // local mutation
// }

// do_something(pos) // passes by value

// fun do_something2(p: ref vec3) { // explicit reference
//   p.x += 1 // modifies reference object
// }

// do_something(ref pos) // explicit reference


// */


// for x in xs {

// }



// fun ints_range(start: number, end: number, f: lambda): number @inline {
//   var j = start
//   while true {
//     f(j)
//     j = j + 1
//     if j > end {
//       return j - 1
//     }
//   }
// }

// fun testing() {
//   var x = ints_range(1, 10) { |i|
//     print(i)
//   }
//   print("Finish $x")
// }
// testing()

// static var x = do_thing(10)
// static print(x)


// static var my_cool_blk: lambda
// static {
//   var blk = block {
//     var i = 0
//     while i < 3 {
//       i = i + 1
//     }
//     i
//   }
//   if 123 > 20 {
//     my_cool_blk = blk
//   }
// }
// // Inlines the lambda contents
// var m1 = my_cool_blk()
// var m2 = my_cool_blk()
// var m3 = my_cool_blk()
// var result = m1 + m2 + m3
// assert(result == 9)


// fun run_four_blk(blk: lambda) @inline {
//   blk()
//   blk()
//   blk()
//   blk()
// }

// fun print_four_times(text: string) @inline {
//   print("Calling print 4 times")
//   print(text)
//   print(text)
//   print(text)
//   print(text)
// }



// print_four_times("hello")
// print_four_times("hello something")

// static var blk = block { |x, y, z|
//   x + y * z
// }
// print(blk(1,2,3))

// TODO: OpCode::Return only handle doubles
// static fun do_thing(n: number): lambda {
//   print("Called at compile time")
//   var blk = block { |x| x + n }
//   return blk
// }

// static var x = do_thing(10)
// print(x(20))

// fun ints(start: number, f: lambda) @inline {
//   while true {
//     f(start)
//     start = start + 1
//   }
// }

// fun ints_range(start: number, end: number, f: lambda) @inline {
//   var j = start
//   while j <= end {
//     f(j)
//     j = j + 1
//   }
// }

// fun take(n: number, gen: lambda) @inline {
//   var i = 0
//   gen() { |zzz|
//     zzz()
//     i = i + 1
//     if i >= n {
//       return
//     }
//   }
// }



// fun py_triples(count: number, foo: lambda) @inline {
//   take(count) { |yield|
//     ints(1) { |z|
//       ints_range(1, z) { |x|
//         ints_range(x, z) { |y|
//           if x * x + y * y == z * z {
//             yield() {
//               foo(x, y, z)
//             }
//           }
//         }
//       }
//     }
//   }
// }

// fun run_code() {
//   var sum = 0
//   py_triples(100) { |x, y, z|
//     sum = sum + x * y * z
//   }
//   assert(sum == 54056100)
// }

// run_code()


// fun take_ints(s: number, n: number, gen: lambda) @inline {
//   var i = 0
//   ints(s) { |x|
//     gen(x)
//     i = i + 1
//     if i >= n {
//       return
//     }
//   }
// }

// fun do_stuff() {
//   take_ints(10, 20) { |x|
//     print(x)
//   }
// }
// do_stuff()



// fun run_times(n: number, blk: lambda) @inline {
//   var i = 0
//   while i < n {
//     blk(i)
//     i = i + 1
//   }
// }


// var z = 100
// var x = 3
// var y = do_thing(z)(y)

// print(y)
// run_times(5) {
//   print(i)
// }

// run_times(5, block { |i|
//   print(i)
// })

// static var x = block {|it| it+1}
// print(x(100))
// fun cool_thing(): lambda @inline {
//   var i = 5
//   return block { |n|
//     n + i
//   }
// }

// print(cool_thing()(4))

// run_four_blk(blk)

// run_four_blk(block {
//   print("run this anonymous block 4 times")
// })

// Outer scope variables 
// {
//   var another_result = 0
//   run_four_blk(block {
//     another_result = another_result + 1
//   })
//   assert(another_result == 4)
// }

// Function early returns
// TODO: This is picking up the wrong block


// fun assert(b: bool) @extern

// fun run_four_blk(blk: lambda) @inline {
//   blk()
//   blk()
//   blk()
//   blk()
// }

// fun try_something(): number {
//   var result = 0
//   run_four_blk(block {
//     result = result + 1
//     if result == 3 {
//       return result
//     }
//   })
//   return result
// }

// var result = try_something()
// print("It is $result")


// fun run_four_blk(blk: lambda) @inline {
//   blk()
//   blk()
//   blk()
//   blk()
// }
// fun run_four(text: string) @inline {
//   print("Calling print 4 times")
//   print(text)
//   print(text)
//   print(text)
//   print(text)
// }

// static var my_cool_blk: lambda
// static {
//   var blk = block {
//     var i = 0
//     while i < 3 {
//       print("Print something!")
//       i = i + 1
//     }
//     i
//   }
//   if 123 > 20 {
//     my_cool_blk = blk
//   }
// }
// // Inlines the lambda contents
// var m1 = my_cool_blk()
// var m2 = my_cool_blk()
// var m3 = my_cool_blk()
// var result = m1 + m2 + m3
// print("result of calling blocks: $result")

// run_four("hello")
// run_four("hello something")

// static var blk = block {
//   print("inside a block")
// }
// run_four_blk(blk)
// run_four_blk(block {
//   print("run this anonymous block 4 times")
// })


// fun iterate(blk: lambda) @inline {
//   var i = 0
//   while i < 10 {
//     blk(i)
//     i = i + 1
//   }
// }
// fun ints(start: number, blk: lambda) @inline {
//   while true {
//     blk(start)
//     start = start + 1
//   }
// }

// fun take(n: number, gen: lambda) @inline {
//   var i = 0
//   gen { |f|
//     i = i + 1
//     f()
//     if i >= n {
//       return
//     }
//   }
// }

// fun map(a: array, blk: block) @inline {
//   a = []
//   for (x in a) {
//     a[it_index] = blk(x)
//   }
//   return a
// }

// my_list = map(a) { it + 1 }

// a = []
// for (it in a) {
//   a[it_index] = it + 1
// }
// my_list = a


// fun test_thing(thing): placeholder {
//  static if typeof(thing) == string {
//    static function.return_type = string;
//    print("Okay")
//  } else if (typeof(thing) == number) {
//   print("Whatever")
//  }
// }
// test_thing(100)
